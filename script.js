// -----------------------------------------------------------
// 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// -----------------------------------------------------------
// –í–ê–® API-–ö–õ–Æ–ß (–ü—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å OpenWeatherMap):
const API_KEY = "81f7baf7815a06b27c1c2bc6045aa0e3"; 
const API_URL = "https://api.openweathermap.org/data/2.5/weather";

// -----------------------------------------------------------
// 2. –ë–ê–ó–ê –î–ê–ù–ù–´–• –ì–ê–†–î–ï–†–û–ë–ê (–° –∏–∫–æ–Ω–∫–∞–º–∏)
// -----------------------------------------------------------
const WARDROBE_DATA = [
    // –í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞
    { category: "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", name: "–ü–ª–æ—Ç–Ω—ã–π –∑–∏–º–Ω–∏–π –ø—É—Ö–æ–≤–∏–∫", min_t: -20, max_t: -5, rain_proof: false, icon: "üß•" },
    { category: "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", name: "–¢–µ–ø–ª–æ–µ —à–µ—Ä—Å—Ç—è–Ω–æ–µ –ø–∞–ª—å—Ç–æ", min_t: -5, max_t: 5, rain_proof: false, icon: "üß£" },
    { category: "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", name: "–î–µ–º–∏—Å–µ–∑–æ–Ω–Ω–∞—è –∫—É—Ä—Ç–∫–∞/–ø–ª–∞—â", min_t: 5, max_t: 15, rain_proof: true, icon: "üß•" },
    { category: "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", name: "–õ–µ–≥–∫–∞—è –≤–µ—Ç—Ä–æ–≤–∫–∞", min_t: 15, max_t: 25, rain_proof: true, icon: "üí®" },
    { category: "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", name: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—Ç–æ–ª—å–∫–æ —Ñ—É—Ç–±–æ–ª–∫–∞)", min_t: 25, max_t: 50, rain_proof: false, icon: "‚òÄÔ∏è" },
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π
    { category: "–û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π", name: "–¢–µ—Ä–º–æ–±–µ–ª—å–µ –∏ —Å–≤–∏—Ç–µ—Ä", min_t: -20, max_t: 0, rain_proof: false, icon: "üß§" },
    { category: "–û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π", name: "–õ–æ–Ω–≥—Å–ª–∏–≤ –∏–ª–∏ –ª–µ–≥–∫–∏–π —Å–≤–∏—Ç–µ—Ä", min_t: 0, max_t: 15, rain_proof: false, icon: "üëï" },
    { category: "–û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π", name: "–§—É—Ç–±–æ–ª–∫–∞ –∏–ª–∏ —Ä—É–±–∞—à–∫–∞", min_t: 15, max_t: 50, rain_proof: false, icon: "üëö" },
    
    // –ù–∏–∑
    { category: "–ù–∏–∑", name: "–¢–µ–ø–ª—ã–µ –±—Ä—é–∫–∏ —Å –Ω–∞—á–µ—Å–æ–º", min_t: -20, max_t: 0, rain_proof: false, icon: "üëñ" },
    { category: "–ù–∏–∑", name: "–î–∂–∏–Ω—Å—ã/–ü–ª–æ—Ç–Ω—ã–µ –±—Ä—é–∫–∏", min_t: 0, max_t: 20, rain_proof: false, icon: "üëñ" },
    { category: "–ù–∏–∑", name: "–®–æ—Ä—Ç—ã/–õ–µ–≥–∫–∞—è —é–±–∫–∞", min_t: 20, max_t: 50, rain_proof: false, icon: "ü©≥" },

    // –û–±—É–≤—å
    { category: "–û–±—É–≤—å", name: "–ó–∏–º–Ω–∏–µ –±–æ—Ç–∏–Ω–∫–∏", min_t: -20, max_t: 0, rain_proof: true, icon: "üë¢" },
    { category: "–û–±—É–≤—å", name: "–ö–æ–∂–∞–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏/–ö—Ä–æ—Å—Å–æ–≤–∫–∏", min_t: 0, max_t: 15, rain_proof: true, icon: "üëü" },
    { category: "–û–±—É–≤—å", name: "–õ–µ–≥–∫–∏–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏/–¢—É—Ñ–ª–∏", min_t: 15, max_t: 50, rain_proof: false, icon: "üëü" },
    
    // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
    { category: "–ê–∫—Å–µ—Å—Å—É–∞—Ä", name: "–®–∞–ø–∫–∞, –ø–µ—Ä—á–∞—Ç–∫–∏ –∏ —à–∞—Ä—Ñ", min_t: -10, max_t: 5, rain_proof: false, icon: "‚ùÑÔ∏è" },
    { category: "–ê–∫—Å–µ—Å—Å—É–∞—Ä", name: "–õ–µ–≥–∫–∏–π —à–∞—Ä—Ñ –∏–ª–∏ –ø–µ—Ä—á–∞—Ç–∫–∏", min_t: 5, max_t: 15, rain_proof: false, icon: "üß£" }
];

// -----------------------------------------------------------
// 3. –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–†–û–°–ê –ü–û–ì–û–î–´ 
// -----------------------------------------------------------
async function fetchWeather(city) {
    const url = `${API_URL}?q=${city}&appid=${API_KEY}&units=metric&lang=ru`;
    
    try {
        const response = await fetch(url);
        const data = await response.json();

        if (response.ok) {
            const temp = Math.round(data.main.temp); 
            const weather_code = data.weather[0].main;
            const is_rainy = ['Rain', 'Snow', 'Drizzle', 'Thunderstorm'].includes(weather_code);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ–≥–æ–¥—ã
            let weather_emoji = '';
            if (weather_code === 'Clear') weather_emoji = '‚òÄÔ∏è';
            else if (weather_code === 'Clouds') weather_emoji = '‚òÅÔ∏è';
            else if (weather_code === 'Rain' || weather_code === 'Drizzle') weather_emoji = 'üåßÔ∏è';
            else if (weather_code === 'Snow') weather_emoji = '‚ùÑÔ∏è';
            else if (weather_code === 'Thunderstorm') weather_emoji = '‚õàÔ∏è';
            else weather_emoji = '‚ùì';

            return { 
                temp, 
                is_rainy, 
                description: data.weather[0].description,
                weather_emoji
            };
        } else {
            throw new Error(`–ì–æ—Ä–æ–¥ "${city}" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ API-–∫–ª—é—á–µ.`);
        }
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã.");
    }
}

// -----------------------------------------------------------
// 4. –û–°–ù–û–í–ù–û–ô –ê–õ–ì–û–†–ò–¢–ú –ü–û–î–ë–û–†–ê 
// -----------------------------------------------------------
function recommendClothes(temp, is_rainy) {
    const recommendations = {}; 

    for (const item of WARDROBE_DATA) {
        const category = item.category;

        if (temp >= item.min_t && temp <= item.max_t) {
            if (!is_rainy || item.rain_proof) {
                if (!recommendations[category]) {
                    recommendations[category] = { 
                        name: item.name, 
                        icon: item.icon 
                    }; 
                }
            }
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ó–æ–Ω—Ç –ø—Ä–∏ –æ—Å–∞–¥–∫–∞—Ö
    if (is_rainy) {
        recommendations['–ê–∫—Å–µ—Å—Å—É–∞—Ä (–ó–∞—â–∏—Ç–∞)'] = { 
            name: '–ó–æ–Ω—Ç', 
            icon: '‚òî' 
        };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    const tips = getSmartTips(temp, is_rainy);
    
    return { recommendations, tips };
}

// -----------------------------------------------------------
// 5. –§–£–ù–ö–¶–ò–Ø: –£–º–Ω—ã–µ –°–æ–≤–µ—Ç—ã ("–§–∏—à–∫–∏")
// -----------------------------------------------------------
function getSmartTips(temp, is_rainy) {
    const tips = [];
    
    if (temp <= 5) {
        tips.push({ text: "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∞–Ω—Ç–∏—Ñ—Ä–∏–∑–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!", icon: "üöó" });
    }
    if (temp >= 25) {
        tips.push({ text: "–ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º.", icon: "üíß" });
    }
    if (is_rainy) {
        tips.push({ text: "–í—ã–±–∏—Ä–∞–π—Ç–µ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—É—é –æ–±—É–≤—å –∏ –æ–¥–µ–∂–¥—É, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥—Ä—É–≥–æ–µ.", icon: "üõ°Ô∏è" });
    }
    if (temp >= -5 && temp <= 5 && !is_rainy) {
        tips.push({ text: "–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏. –û–¥–µ–≤–∞–π—Ç–µ—Å—å –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ.", icon: "üå≤" });
    }
    if (temp < 0 && !is_rainy) {
        tips.push({ text: "–ù–∞ –¥–æ—Ä–æ–≥–∞—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ–ª–æ–ª–µ–¥. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!", icon: "‚ö†Ô∏è" });
    }
    
    return tips;
}


// -----------------------------------------------------------
// 6. –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò –ò–ù–¢–ï–†–§–ï–ô–°–ê
// -----------------------------------------------------------
async function getRecommendation() {
    const cityInput = document.getElementById('city-input');
    const resultsDiv = document.getElementById('results');
    const loadingDiv = document.getElementById('loading');
    const errorDiv = document.getElementById('error-message');
    const tipsDiv = document.getElementById('tips'); 
    
    const city = cityInput.value.trim();

    resultsDiv.innerHTML = '';
    errorDiv.style.display = 'none';
    tipsDiv.innerHTML = ''; 
    
    if (city === "") { 
        errorDiv.textContent = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.";
        errorDiv.style.display = 'block';
        return;
    }

    loadingDiv.style.display = 'block';

    try {
        const weather = await fetchWeather(city);
        const { recommendations, tips } = recommendClothes(weather.temp, weather.is_rainy); 
        
        // ---- –í–´–í–û–î –ü–û–ì–û–î–´ ----
        let outputHTML = `
            <div class="weather-info">
                <span>${weather.weather_emoji}</span> –ü–æ–≥–æ–¥–∞ –≤ <strong>${city}</strong>: 
                <span class="temp-display">${weather.temp}¬∞C</span> 
                (${weather.description}).
                <p>–û—Å–∞–¥–∫–∏: <strong>${weather.is_rainy ? '–ò–¥—É—Ç' : '–ù–µ—Ç'}</strong></p>
            </div>
            <h3>–í–∞—à –æ–±—Ä–∞–∑:</h3>
            <div class="recommendations-grid">
        `;
        
        // ---- –í–´–í–û–î –û–î–ï–ñ–î–´ (–ö–∞—Ä—Ç–æ—á–∫–∏) ----
        for (const category in recommendations) {
            const item = recommendations[category];
            outputHTML += `
                <div class="recommendation-item">
                    <span class="item-icon">${item.icon}</span>
                    <div class="item-details">
                        <span class="item-category">${category}:</span>
                        <span class="item-name">${item.name}</span>
                    </div>
                </div>
            `;
        }
        outputHTML += `</div>`; 
        
        resultsDiv.innerHTML = outputHTML;

        // ---- –í–´–í–û–î –°–û–í–ï–¢–û–í ----
        if (tips.length > 0) {
            let tipsHTML = '<h3>‚ú® –£–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</h3><ul>';
            tips.forEach(tip => {
                tipsHTML += `<li><span class="tip-icon">${tip.icon}</span> ${tip.text}</li>`;
            });
            tipsHTML += '</ul>';
            tipsDiv.innerHTML = tipsHTML;
        }

    } catch (error) {
        errorDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        errorDiv.style.display = 'block';
    } finally {
        loadingDiv.style.display = 'none';
    }
}


// -----------------------------------------------------------
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø 
// -----------------------------------------------------------
document.addEventListener('DOMContentLoaded', () => {
    const cityInput = document.getElementById('city-input');
    if (cityInput) {
        cityInput.value = "Timashevsk"; 
    }
});

